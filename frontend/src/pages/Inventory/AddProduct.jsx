/* ────────────────────────────────────────────────────────────
   AddProduct.jsx  • Tailwind CSS 3+
   ──────────────────────────────────────────────────────────── */
   import { useState }       from "react";
   import { useNavigate }    from "react-router-dom";
   import { toast }          from "react-toastify";
   import { FiUpload }       from "react-icons/fi";
   import api                from "../api";
   
   const AVAILABILITY = [
     { id: "inStock",    label: "In-stock" },
     { id: "restocking", label: "Restocking soon" },
     { id: "inactive",   label: "Mark as inactive" },
   ];
   
   const META = [
     { title: "General",
       body : "Add information about the product here." },
     { title: "Product Variants",
       body : "For products with variables, such as size, colour or specs to manage their inventory levels." },
     { title: "Product availability",
       body : "Edit inventory levels to better help you manage inventory" },
     { title: "Product Descriptions & Features",
       body : "Add attributes for this product to create and manage their inventory." },
   ];
   
   export default function AddProduct() {
     const nav = useNavigate();
     const [saving, setSaving] = useState(false);
   
     const [formData, setFormData] = useState({
       productName     : "",
       productCategory : "",
       brand           : "",
   
       baseRam     : "",
       baseStorage : "",
       baseCPU     : "",
   
       costPrice    : "",
       sellingPrice : "",
       quantity     : 1,
   
       serialNumbers : ["", "", "", "", ""],
       supplier      : "",
   
       variants : [{ attribute: "", value: "", inputCost: "" }],
       availability  : "inStock",
       status        : "Autogenerated",
       reorderLevel  : 10,
       stockLocation : "",
   
       productId : "1002",
   
       images : [],                // <— multiple images
       description : "",
       features    : [{ key: "", value: "" }],
     });
   
     /* ─ helpers ─ */
     const change = ({ target }) =>
       setFormData((p) => ({ ...p, [target.name]: target.value }));
   
     const setSerial  = (i, v) => setFormData(p => {
       const list = [...p.serialNumbers]; list[i] = v;
       return { ...p, serialNumbers: list };
     });
   
     const setFeature = (i, k, v) => setFormData(p => {
       const list = [...p.features]; list[i][k] = v;
       return { ...p, features: list };
     });
   
     const setVariant = (i, k, v) => setFormData(p => {
       const list = [...p.variants]; list[i][k] = v;
       return { ...p, variants: list };
     });
   
     const addImages = (files) =>
       setFormData((p) => ({ ...p, images: [...p.images, ...files] }));
   
     /* ─ submit ─ */
     const handleSubmit = async (e) => {
       e.preventDefault();
       setSaving(true);
   
       try {
         const fd = new FormData();
   
         /* primitives */
         [
           "productName","productCategory","brand",
           "baseRam","baseStorage","baseCPU",
           "costPrice","sellingPrice","quantity",
           "availability","status","reorderLevel",
           "stockLocation","productId","description",
         ].forEach((k) => fd.append(k, formData[k]));
   
         /* arrays / objects -> JSON strings */
         fd.append("serialNumbers", JSON.stringify(formData.serialNumbers));
         fd.append("variants",      JSON.stringify(formData.variants));
         fd.append("features",      JSON.stringify(formData.features));
   
         /* images[] */
         formData.images.forEach((file) => fd.append("images", file));
   
         await api.post("/api/products", fd, {
           headers: { "Content-Type": "multipart/form-data" },
         });
   
         toast.success("Product created");
         nav("/inventory");
       } catch (err) {
         toast.error(err.response?.data?.message || "Could not save product");
       } finally {
         setSaving(false);
       }
     };
   
     /* ─ reusable meta block ─ */
     const Meta = ({ title, body, children }) => (
       <div className="flex gap-10">
         {/* left column */}
         <div className="w-[260px] shrink-0">
           <h3 className="text-[17px] font-semibold">{title}</h3>
           <p className="mt-1 text-sm leading-5 text-gray-600">{body}</p>
   
           {title === "General" && (
             <div className="mt-6 flex gap-4">
               <button
                 type="button"
                 onClick={() => nav(-1)}
                 className="rounded border border-orange-500 px-6 py-1.5 text-orange-500">
                 Cancel
               </button>
               <button
                 type="submit"
                 disabled={saving}
                 className="rounded bg-orange-500 px-6 py-1.5 text-white disabled:opacity-60">
                 {saving ? "Saving…" : "Save"}
               </button>
             </div>
           )}
         </div>
   
         {/* right column */}
         <div className="flex-1 space-y-8">{children}</div>
       </div>
     );
   
     /* ─ UI ─ */
     return (
       <form onSubmit={handleSubmit} className="mx-auto max-w-[1450px] px-4 space-y-16 pb-40">
   
         {/* ───────────── General ───────────── */}
         <Meta {...META[0]}>
           <input
             name="productName"
             placeholder="Enter product name"
             value={formData.productName}
             onChange={change}
             className="input"
           />
   
           {/* brand + category */}
           <div className="grid gap-6 md:grid-cols-2">
             <div>
               <label className="form-label">Brand</label>
               <select
                 name="brand"
                 value={formData.brand}
                 onChange={change}
                 className="input">
                 <option value="" disabled hidden>Enter brand name</option>
                 <option>Dell</option><option>HP</option>
               </select>
             </div>
             <div>
               <label className="form-label">Product Category</label>
               <select
                 name="productCategory"
                 value={formData.productCategory}
                 onChange={change}
                 className="input">
                 <option value="" disabled hidden>Enter product category</option>
                 <option>Laptops</option><option>Monitor</option><option>Accessories</option>
               </select>
             </div>
           </div>
   
           {/* specs */}
           <div className="grid gap-6 md:grid-cols-3">
             {[
               ["baseRam",     "Base Ram"],
               ["baseStorage", "Base Storage"],
               ["baseCPU",     "Base CPU/Processor"],
             ].map(([name, ph]) => (
               <select
                 key={name}
                 name={name}
                 value={formData[name]}
                 onChange={change}
                 className="input">
                 <option value="" disabled hidden>{ph}</option>
                 <option>8GB</option><option>16GB</option><option>32GB</option>
               </select>
             ))}
           </div>
   
           {/* prices */}
           <div className="grid gap-6 md:grid-cols-2">
             <input
               name="costPrice"
               value={formData.costPrice}
               onChange={change}
               placeholder="Enter Cost Price per Unit (NGN)"
               className="input"
             />
             <input
               name="sellingPrice"
               value={formData.sellingPrice}
               onChange={change}
               placeholder="Enter Selling Price per Unit (NGN)"
               className="input"
             />
           </div>
   
           {/* quantity */}
           <div>
             <label className="form-label">Enter Product quantity</label>
             <input
               name="quantity"
               type="number"
               value={formData.quantity}
               onChange={change}
               className="input"
             />
           </div>
   
           {/* serials */}
           <div className="space-y-3 rounded border bg-white p-4">
             <p className="font-medium">Serial Number(s)</p>
             <div className="grid gap-2 sm:grid-cols-2">
               {formData.serialNumbers.map((s, i) => (
                 <div key={i} className="flex items-center gap-2">
                   <span className="w-4 text-xs text-gray-400">{i + 1}</span>
                   <input
                     value={s}
                     onChange={(e) => setSerial(i, e.target.value)}
                     placeholder="Enter Serial number"
                     className="flex-1 rounded border px-3 py-1.5 text-sm placeholder:text-gray-400"
                   />
                 </div>
               ))}
             </div>
           </div>
   
           <input
             name="supplier"
             value={formData.supplier}
             onChange={change}
             placeholder="Enter supplier name"
             className="input"
           />
         </Meta>
   
         {/* ───────────── Product Variants ───────────── */}
         <Meta {...META[1]}>
           <div className="flex items-center justify-between">
             <h4 className="font-medium">Product Variants</h4>
             <button
               type="button"
               onClick={() =>
                 setFormData((p) => ({
                   ...p,
                   variants: [...p.variants, { attribute: "", value: "", inputCost: "" }],
                 }))}
               className="text-sm font-medium text-orange-500 cursor-pointer">
               Add Variants
             </button>
           </div>
   
           {formData.variants.map((v, idx) => (
             <div key={idx} className="grid grid-cols-3 gap-4 mb-4">
               {[
                 ["attribute", "Attribute (e.g. ram)"],
                 ["value",     "Value (e.g. 8gb)"],
                 ["inputCost", "Input cost"],
               ].map(([k, ph]) => (
                 <input
                   key={k}
                   value={v[k]}
                   onChange={(e) => setVariant(idx, k, e.target.value)}
                   placeholder={ph}
                   className="input"
                 />
               ))}
             </div>
           ))}
         </Meta>
   
         {/* ───────────── Product availability ───────────── */}
         <Meta {...META[2]}>
           {/* stock status */}
           <div>
             <label className="form-label">Stock Status</label>
             <div className="flex flex-wrap gap-8">
               {AVAILABILITY.map((opt) => (
                 <label key={opt.id} className="flex items-center gap-2 text-sm">
                   <input
                     type="checkbox"
                     checked={formData.availability === opt.id}
                     onChange={() =>
                       setFormData((p) => ({ ...p, availability: opt.id }))}
                     className="accent-orange-500"
                   />
                   {opt.label}
                 </label>
               ))}
             </div>
           </div>
   
           {/* status + reorder */}
           <div className="grid gap-6 md:grid-cols-2">
             <input
               name="status"
               value={formData.status}
               onChange={change}
               placeholder="Product Status"
               className="input"
             />
             <input
               name="reorderLevel"
               type="number"
               value={formData.reorderLevel}
               onChange={change}
               placeholder="Reorder level"
               className="input"
             />
           </div>
   
           {/* location */}
           <select
             name="stockLocation"
             value={formData.stockLocation}
             onChange={change}
             className="input">
             <option value="" disabled hidden>Stock location</option>
             <option value="Component 180">Component 180</option>
             <option value="Warehouse A">Warehouse A</option>
           </select>
   
           {/* product ID */}
           <input
             name="productId"
             readOnly
             value={formData.productId}
             className="input bg-gray-100"
           />
         </Meta>
   
         {/* ───────────── Descriptions & Features ───────────── */}
         <Meta {...META[3]}>
           {/* image upload */}
           <div>
             <label className="form-label block">Upload Product Image(s)</label>
             <label className="flex items-center gap-2 rounded border px-4 py-2 text-sm cursor-pointer">
               <FiUpload /> Upload image
               <input
                 type="file"
                 multiple
                 className="hidden"
                 onChange={(e) => addImages(Array.from(e.target.files))}
               />
             </label>
             <p className="mt-1 text-xs text-gray-400">
               Upload png / jpeg – {formData.images.length} selected
             </p>
           </div>
   
           <textarea
             name="description"
             value={formData.description}
             onChange={change}
             rows={3}
             placeholder="Enter a description..."
             className="input resize-none"
           />
   
           {/* features */}
           <div>
             <div className="mb-3 flex items-center justify-between">
               <h4 className="font-medium">Features</h4>
               <button
                 type="button"
                 onClick={() =>
                   setFormData((p) => ({
                     ...p,
                     features: [...p.features, { key: "", value: "" }],
                   }))}
                 className="text-sm font-medium text-orange-500 cursor-pointer">
                 + Add specifications
               </button>
             </div>
   
             {formData.features.map((f, i) => (
               <div key={i} className="mb-3 grid gap-4 md:grid-cols-2">
                 <input
                   value={f.key}
                   onChange={(e) => setFeature(i, "key", e.target.value)}
                   placeholder="Attribute (e.g. RAM)"
                   className="input"
                 />
                 <input
                   value={f.value}
                   onChange={(e) => setFeature(i, "value", e.target.value)}
                   placeholder="Value (e.g. 8GB)"
                   className="input"
                 />
               </div>
             ))}
           </div>
         </Meta>
       </form>
     );
   }
   